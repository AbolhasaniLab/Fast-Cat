Device Specifications: 
Installed RAM	384 GB (383 GB usable)
CPU Intel(R) Xeon(R) Gold 6258R CPU @ 2.70GHz
GPU 0 NVIDIA RTX A6000

	Driver version:	31.0.15.3598
	Driver date:	5/24/2023
	DirectX version:	12 (FL 12.1)
	
GPU 1 NVIDIA RTX A6000

	Driver version:	31.0.15.3598
	Driver date:	5/24/2023
	DirectX version:	12 (FL 12.1)

Windows Specifications:
Edition	Windows 10 Education
Version	21H2
OS build	19044.2604
Experience	Windows Feature Experience Pack 120.2212.4190.0


**Cascade Neural Network Architecture Study (Cascade_Arch_Study.py)
This Python script enables you to perform an architecture study on a cascade neural network structure using a provided dataset. By plotting R-squared values for various architectures, it helps identify a suitable range of nodes and layers.

Requirements
Ensure you have the required libraries installed by referring to the FAST-CAT-DT.yml file.

Usage
When running the code, you will be prompted to select the L1-Data file, which contains the dataset for analysis.
The script will then generate multiple cascade feedforward structures within the specified range of nodes and layers.
R-squared values will be recorded as accuracy metrics for the output of each generated model.
The generated models will have "i" layers, each containing "j" nodes, providing insights into the best architecture hyperparameter range for building a digital twin.
Finally, a colormapped surface plot displaying the R-squared values for the various architectures will be presented, aiding you in selecting a reasonable range of nodes and layers for the digital twin.

**Digital Twin based on CNNs (CAscade_ensemble.py)
This Python code generates an ensemble of Convolutional Neural Networks (CNNs) based on the selected range for the number of layers and nodes studied in the previous part.
The final generated model will be exported in the L1-Data directory under a folder called "Ensemble". You can use this file directory for the next steps.

Usage
Follow the same steps as in the previous part by selecting the L1-Data directory.
The code will randomly select some architectures within the specified range and plot the parity plot.
It will provide the R-squared values on the training and test set.
The data is split with 80% for training, 10% for validation, and 10% for the test set, which has not been seen by the model during training.
As the shuffle and model generation are random, it is highly recommended to run the code multiple times to obtain more robust results.

The best model, which we have found, is provided in the L1-ML Model directory. However, you have the flexibility to experiment and generate other models as well using the provided code.

**Model Evaluation with Parity Plot
You can use the LoadModels.py script to double-check the performance of your model by plotting a parity plot. This plot will help you visualize how well your model's predictions match the actual data.

**Surface Plots for Feature Exploration
The DT_Surface_Plots.py script allows you to explore different inputs and pick two features (F1 and F2) to vary between 0 and 1 while keeping other parameters fixed at "v" values. The data generated by the script can be exported and used to create plots in Origin software.

**Shapely Analysis with ShapPlots.py
The ShapPlots.py script provides a Shapely analysis on selectivity and yield. To use this script, you'll need to select the data directory (L1-Data) and the model directory (either L1-ML Model or the models generated with Cascade_ensemble.py). The analysis will give you valuable insights into the impact of different features on selectivity and yield.

**Note on Model Loading
Please be aware that the L1-ML Model was initialized on servers equipped with GPU specifications. If you try to load this model on a CPU-utilized PC, you might encounter errors. In such cases, you can use Cascade_ensemble.py to build your own Digital Twin (DT) and then load it without any problem.